<?php

namespace Drupal\ckeditor_support\Plugin\entity_embed\EntityEmbedDisplay;

use Drupal;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\entity_embed\Annotation\EntityEmbedDisplay;
use Drupal\entity_embed\Plugin\entity_embed\EntityEmbedDisplay\EntityReferenceFieldFormatter;
use Drupal\entity_embed\Plugin\entity_embed\EntityEmbedDisplay\ViewModeFieldFormatter;
use Drupal\image\Plugin\Field\FieldType\ImageItem;
use Drupal\media\MediaInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Entity Embed Display reusing entity reference field formatters.
 *
 * @see \Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayInterface
 *
 * @EntityEmbedDisplay(
 *   id = "media_image_display",
 *   label = @Translation("Media Image Display Entity Embed"),
 *   field_type = "entity_reference"
 * )
 */
class MediaImageDisplayStorage extends ViewModeFieldFormatter {

  protected $entityViewStorage;

  protected $entityDisplayRepository;

  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    /** @var MediaImageDisplayStorage $instance */
    $instance = parent::create($container, $configuration, $plugin_id, $plugin_definition); // TODO: Change the autogenerated stub
    $instance->setEntityViewStorage($container->get('entity_type.manager')->getStorage('entity_view_display'));
    $instance->setEntityDisplayRepository($container->get('entity_display.repository'));
    return $instance;
  }


  public function getFieldFormatter() {
    $view_mode = $this->getViewModeFromAttributes();
    if (!isset($this->fieldFormatter)) {
      $display = [
        'type' => $this->getFieldFormatterId(),
        'settings' => [
          'view_mode' => $view_mode,
        ],
        'label' => 'hidden',
      ];

      // Create the formatter plugin. Will use the default formatter for that
      // field type if none is passed.
      $this->fieldFormatter = $this->formatterPluginManager->getInstance(
        [
          'field_definition' => $this->getFieldDefinition(),
          'view_mode' => '_entity_embed',
          'configuration' => $display,
        ]
      );
    }
    return $this->fieldFormatter;
  }


  public function build() {
    $view_mode = $this->getViewModeFromAttributes();
    $image_style = $this->getImageStyleFromAttributes();
    $build = parent::build();
    $entity = parent::getEntityFromContext();

    if(!$entity instanceof MediaInterface)
      return $build;

    $image_field_name = $this->getMediaImageSourceField($entity);
    $entity_type_id = $entity->getEntityTypeId();

    $view_display = $this->entityViewStorage->load($entity_type_id . '.' . $entity->bundle() . '.' . $view_mode);
    if(!$view_display instanceof EntityViewDisplayInterface)
      $view_display = $this->entityViewStorage->load($entity_type_id . '.' . $entity->bundle() . '.' . 'default');

    if($view_display instanceof EntityViewDisplayInterface){
      $components = $view_display->getComponents();
      if(!empty($components[$image_field_name])) {
        $components[$image_field_name]['settings']['image_style'] = $image_style;
        $view_display->setComponent($image_field_name, $components[$image_field_name]);
      }
      $buildEntity = $view_display->build($entity);
      return ['#theme' => 'media_image_display', '#media' => $buildEntity];
    }

    return $build;
  }

  protected function getMediaImageSourceField(EntityInterface $entity) {
    if (!$entity instanceof MediaInterface) {
      return NULL;
    }

    $field_definition = $entity->getSource()
      ->getSourceFieldDefinition($entity->bundle->entity);
    $item_class = $field_definition->getItemDefinition()->getClass();
    if ($item_class == ImageItem::class || is_subclass_of($item_class, ImageItem::class)) {
      return $field_definition->getName();
    }
    return NULL;
  }

  protected function getViewModeFromAttributes():string{
    $attributes = $this->getAttributeValues();
    $viewMode = $attributes['data-entity-embed-display-settings']['view_mode'];

    $mediaViewModes = $this->entityDisplayRepository->getViewModes('media');
    foreach ($mediaViewModes as $key => $mediaViewMode){
      if('view_mode:'.$mediaViewMode['id'] == $viewMode){
        return $key;
      }
    }
    return '';
  }

  protected function getImageStyleFromAttributes():string{
    $attributes = $this->getAttributeValues();
    return $attributes['data-entity-embed-image-style'] ?? '';
  }

  /**
   * @param mixed $entityViewStorage
   */
  public function setEntityViewStorage($entityViewStorage): void {
    $this->entityViewStorage = $entityViewStorage;
  }

  /**
   * @param mixed $entityDisplayRepository
   */
  public function setEntityDisplayRepository($entityDisplayRepository): void {
    $this->entityDisplayRepository = $entityDisplayRepository;
  }

}
